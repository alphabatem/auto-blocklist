// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package shadow_drive_user_staking

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type UnstakeInfo struct {
	TimeLastUnstaked  int64
	EpochLastUnstaked uint64
	Unstaker          ag_solanago.PublicKey
}

var UnstakeInfoDiscriminator = [8]byte{35, 204, 218, 156, 35, 179, 155, 198}

func (obj UnstakeInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UnstakeInfoDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TimeLastUnstaked` param:
	err = encoder.Encode(obj.TimeLastUnstaked)
	if err != nil {
		return err
	}
	// Serialize `EpochLastUnstaked` param:
	err = encoder.Encode(obj.EpochLastUnstaked)
	if err != nil {
		return err
	}
	// Serialize `Unstaker` param:
	err = encoder.Encode(obj.Unstaker)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UnstakeInfoDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[35 204 218 156 35 179 155 198]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TimeLastUnstaked`:
	err = decoder.Decode(&obj.TimeLastUnstaked)
	if err != nil {
		return err
	}
	// Deserialize `EpochLastUnstaked`:
	err = decoder.Decode(&obj.EpochLastUnstaked)
	if err != nil {
		return err
	}
	// Deserialize `Unstaker`:
	err = decoder.Decode(&obj.Unstaker)
	if err != nil {
		return err
	}
	return nil
}

type StorageAccount struct {
	IsStatic                  bool
	InitCounter               uint32
	DelCounter                uint32
	Immutable                 bool
	ToBeDeleted               bool
	DeleteRequestEpoch        uint32
	Storage                   uint64
	StorageAvailable          uint64
	Owner1                    ag_solanago.PublicKey
	Owner2                    ag_solanago.PublicKey
	ShdwPayer                 ag_solanago.PublicKey
	AccountCounterSeed        uint32
	TotalCostOfCurrentStorage uint64
	TotalFeesPaid             uint64
	CreationTime              uint32
	CreationEpoch             uint32
	LastFeeEpoch              uint32
	Identifier                string
}

var StorageAccountDiscriminator = [8]byte{41, 48, 231, 194, 22, 77, 205, 235}

func (obj StorageAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StorageAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsStatic` param:
	err = encoder.Encode(obj.IsStatic)
	if err != nil {
		return err
	}
	// Serialize `InitCounter` param:
	err = encoder.Encode(obj.InitCounter)
	if err != nil {
		return err
	}
	// Serialize `DelCounter` param:
	err = encoder.Encode(obj.DelCounter)
	if err != nil {
		return err
	}
	// Serialize `Immutable` param:
	err = encoder.Encode(obj.Immutable)
	if err != nil {
		return err
	}
	// Serialize `ToBeDeleted` param:
	err = encoder.Encode(obj.ToBeDeleted)
	if err != nil {
		return err
	}
	// Serialize `DeleteRequestEpoch` param:
	err = encoder.Encode(obj.DeleteRequestEpoch)
	if err != nil {
		return err
	}
	// Serialize `Storage` param:
	err = encoder.Encode(obj.Storage)
	if err != nil {
		return err
	}
	// Serialize `StorageAvailable` param:
	err = encoder.Encode(obj.StorageAvailable)
	if err != nil {
		return err
	}
	// Serialize `Owner1` param:
	err = encoder.Encode(obj.Owner1)
	if err != nil {
		return err
	}
	// Serialize `Owner2` param:
	err = encoder.Encode(obj.Owner2)
	if err != nil {
		return err
	}
	// Serialize `ShdwPayer` param:
	err = encoder.Encode(obj.ShdwPayer)
	if err != nil {
		return err
	}
	// Serialize `AccountCounterSeed` param:
	err = encoder.Encode(obj.AccountCounterSeed)
	if err != nil {
		return err
	}
	// Serialize `TotalCostOfCurrentStorage` param:
	err = encoder.Encode(obj.TotalCostOfCurrentStorage)
	if err != nil {
		return err
	}
	// Serialize `TotalFeesPaid` param:
	err = encoder.Encode(obj.TotalFeesPaid)
	if err != nil {
		return err
	}
	// Serialize `CreationTime` param:
	err = encoder.Encode(obj.CreationTime)
	if err != nil {
		return err
	}
	// Serialize `CreationEpoch` param:
	err = encoder.Encode(obj.CreationEpoch)
	if err != nil {
		return err
	}
	// Serialize `LastFeeEpoch` param:
	err = encoder.Encode(obj.LastFeeEpoch)
	if err != nil {
		return err
	}
	// Serialize `Identifier` param:
	err = encoder.Encode(obj.Identifier)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StorageAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StorageAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[41 48 231 194 22 77 205 235]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsStatic`:
	err = decoder.Decode(&obj.IsStatic)
	if err != nil {
		return err
	}
	// Deserialize `InitCounter`:
	err = decoder.Decode(&obj.InitCounter)
	if err != nil {
		return err
	}
	// Deserialize `DelCounter`:
	err = decoder.Decode(&obj.DelCounter)
	if err != nil {
		return err
	}
	// Deserialize `Immutable`:
	err = decoder.Decode(&obj.Immutable)
	if err != nil {
		return err
	}
	// Deserialize `ToBeDeleted`:
	err = decoder.Decode(&obj.ToBeDeleted)
	if err != nil {
		return err
	}
	// Deserialize `DeleteRequestEpoch`:
	err = decoder.Decode(&obj.DeleteRequestEpoch)
	if err != nil {
		return err
	}
	// Deserialize `Storage`:
	err = decoder.Decode(&obj.Storage)
	if err != nil {
		return err
	}
	// Deserialize `StorageAvailable`:
	err = decoder.Decode(&obj.StorageAvailable)
	if err != nil {
		return err
	}
	// Deserialize `Owner1`:
	err = decoder.Decode(&obj.Owner1)
	if err != nil {
		return err
	}
	// Deserialize `Owner2`:
	err = decoder.Decode(&obj.Owner2)
	if err != nil {
		return err
	}
	// Deserialize `ShdwPayer`:
	err = decoder.Decode(&obj.ShdwPayer)
	if err != nil {
		return err
	}
	// Deserialize `AccountCounterSeed`:
	err = decoder.Decode(&obj.AccountCounterSeed)
	if err != nil {
		return err
	}
	// Deserialize `TotalCostOfCurrentStorage`:
	err = decoder.Decode(&obj.TotalCostOfCurrentStorage)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeesPaid`:
	err = decoder.Decode(&obj.TotalFeesPaid)
	if err != nil {
		return err
	}
	// Deserialize `CreationTime`:
	err = decoder.Decode(&obj.CreationTime)
	if err != nil {
		return err
	}
	// Deserialize `CreationEpoch`:
	err = decoder.Decode(&obj.CreationEpoch)
	if err != nil {
		return err
	}
	// Deserialize `LastFeeEpoch`:
	err = decoder.Decode(&obj.LastFeeEpoch)
	if err != nil {
		return err
	}
	// Deserialize `Identifier`:
	err = decoder.Decode(&obj.Identifier)
	if err != nil {
		return err
	}
	return nil
}

type StorageAccountV2 struct {
	Immutable          bool
	ToBeDeleted        bool
	DeleteRequestEpoch uint32
	Storage            uint64
	Owner1             ag_solanago.PublicKey
	AccountCounterSeed uint32
	CreationTime       uint32
	CreationEpoch      uint32
	LastFeeEpoch       uint32
	Identifier         string
}

var StorageAccountV2Discriminator = [8]byte{133, 53, 253, 82, 212, 5, 201, 218}

func (obj StorageAccountV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StorageAccountV2Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Immutable` param:
	err = encoder.Encode(obj.Immutable)
	if err != nil {
		return err
	}
	// Serialize `ToBeDeleted` param:
	err = encoder.Encode(obj.ToBeDeleted)
	if err != nil {
		return err
	}
	// Serialize `DeleteRequestEpoch` param:
	err = encoder.Encode(obj.DeleteRequestEpoch)
	if err != nil {
		return err
	}
	// Serialize `Storage` param:
	err = encoder.Encode(obj.Storage)
	if err != nil {
		return err
	}
	// Serialize `Owner1` param:
	err = encoder.Encode(obj.Owner1)
	if err != nil {
		return err
	}
	// Serialize `AccountCounterSeed` param:
	err = encoder.Encode(obj.AccountCounterSeed)
	if err != nil {
		return err
	}
	// Serialize `CreationTime` param:
	err = encoder.Encode(obj.CreationTime)
	if err != nil {
		return err
	}
	// Serialize `CreationEpoch` param:
	err = encoder.Encode(obj.CreationEpoch)
	if err != nil {
		return err
	}
	// Serialize `LastFeeEpoch` param:
	err = encoder.Encode(obj.LastFeeEpoch)
	if err != nil {
		return err
	}
	// Serialize `Identifier` param:
	err = encoder.Encode(obj.Identifier)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StorageAccountV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StorageAccountV2Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[133 53 253 82 212 5 201 218]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Immutable`:
	err = decoder.Decode(&obj.Immutable)
	if err != nil {
		return err
	}
	// Deserialize `ToBeDeleted`:
	err = decoder.Decode(&obj.ToBeDeleted)
	if err != nil {
		return err
	}
	// Deserialize `DeleteRequestEpoch`:
	err = decoder.Decode(&obj.DeleteRequestEpoch)
	if err != nil {
		return err
	}
	// Deserialize `Storage`:
	err = decoder.Decode(&obj.Storage)
	if err != nil {
		return err
	}
	// Deserialize `Owner1`:
	err = decoder.Decode(&obj.Owner1)
	if err != nil {
		return err
	}
	// Deserialize `AccountCounterSeed`:
	err = decoder.Decode(&obj.AccountCounterSeed)
	if err != nil {
		return err
	}
	// Deserialize `CreationTime`:
	err = decoder.Decode(&obj.CreationTime)
	if err != nil {
		return err
	}
	// Deserialize `CreationEpoch`:
	err = decoder.Decode(&obj.CreationEpoch)
	if err != nil {
		return err
	}
	// Deserialize `LastFeeEpoch`:
	err = decoder.Decode(&obj.LastFeeEpoch)
	if err != nil {
		return err
	}
	// Deserialize `Identifier`:
	err = decoder.Decode(&obj.Identifier)
	if err != nil {
		return err
	}
	return nil
}

type UserInfo struct {
	AccountCounter  uint32
	DelCounter      uint32
	AgreedToTos     bool
	LifetimeBadCsam bool
}

var UserInfoDiscriminator = [8]byte{83, 134, 200, 56, 144, 56, 10, 62}

func (obj UserInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserInfoDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `AccountCounter` param:
	err = encoder.Encode(obj.AccountCounter)
	if err != nil {
		return err
	}
	// Serialize `DelCounter` param:
	err = encoder.Encode(obj.DelCounter)
	if err != nil {
		return err
	}
	// Serialize `AgreedToTos` param:
	err = encoder.Encode(obj.AgreedToTos)
	if err != nil {
		return err
	}
	// Serialize `LifetimeBadCsam` param:
	err = encoder.Encode(obj.LifetimeBadCsam)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserInfoDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[83 134 200 56 144 56 10 62]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `AccountCounter`:
	err = decoder.Decode(&obj.AccountCounter)
	if err != nil {
		return err
	}
	// Deserialize `DelCounter`:
	err = decoder.Decode(&obj.DelCounter)
	if err != nil {
		return err
	}
	// Deserialize `AgreedToTos`:
	err = decoder.Decode(&obj.AgreedToTos)
	if err != nil {
		return err
	}
	// Deserialize `LifetimeBadCsam`:
	err = decoder.Decode(&obj.LifetimeBadCsam)
	if err != nil {
		return err
	}
	return nil
}

type StorageConfig struct {
	ShadesPerGib         uint64
	StorageAvailable     ag_binary.Uint128
	TokenAccount         ag_solanago.PublicKey
	Admin2               ag_solanago.PublicKey
	Uploader             ag_solanago.PublicKey
	MutableFeeStartEpoch *uint32 `bin:"optional"`
	ShadesPerGibPerEpoch uint64
	CrankBps             uint16
	MaxAccountSize       uint64
	MinAccountSize       uint64
}

var StorageConfigDiscriminator = [8]byte{90, 136, 182, 122, 243, 186, 80, 201}

func (obj StorageConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StorageConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ShadesPerGib` param:
	err = encoder.Encode(obj.ShadesPerGib)
	if err != nil {
		return err
	}
	// Serialize `StorageAvailable` param:
	err = encoder.Encode(obj.StorageAvailable)
	if err != nil {
		return err
	}
	// Serialize `TokenAccount` param:
	err = encoder.Encode(obj.TokenAccount)
	if err != nil {
		return err
	}
	// Serialize `Admin2` param:
	err = encoder.Encode(obj.Admin2)
	if err != nil {
		return err
	}
	// Serialize `Uploader` param:
	err = encoder.Encode(obj.Uploader)
	if err != nil {
		return err
	}
	// Serialize `MutableFeeStartEpoch` param (optional):
	{
		if obj.MutableFeeStartEpoch == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MutableFeeStartEpoch)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ShadesPerGibPerEpoch` param:
	err = encoder.Encode(obj.ShadesPerGibPerEpoch)
	if err != nil {
		return err
	}
	// Serialize `CrankBps` param:
	err = encoder.Encode(obj.CrankBps)
	if err != nil {
		return err
	}
	// Serialize `MaxAccountSize` param:
	err = encoder.Encode(obj.MaxAccountSize)
	if err != nil {
		return err
	}
	// Serialize `MinAccountSize` param:
	err = encoder.Encode(obj.MinAccountSize)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StorageConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StorageConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[90 136 182 122 243 186 80 201]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ShadesPerGib`:
	err = decoder.Decode(&obj.ShadesPerGib)
	if err != nil {
		return err
	}
	// Deserialize `StorageAvailable`:
	err = decoder.Decode(&obj.StorageAvailable)
	if err != nil {
		return err
	}
	// Deserialize `TokenAccount`:
	err = decoder.Decode(&obj.TokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `Admin2`:
	err = decoder.Decode(&obj.Admin2)
	if err != nil {
		return err
	}
	// Deserialize `Uploader`:
	err = decoder.Decode(&obj.Uploader)
	if err != nil {
		return err
	}
	// Deserialize `MutableFeeStartEpoch` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MutableFeeStartEpoch)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ShadesPerGibPerEpoch`:
	err = decoder.Decode(&obj.ShadesPerGibPerEpoch)
	if err != nil {
		return err
	}
	// Deserialize `CrankBps`:
	err = decoder.Decode(&obj.CrankBps)
	if err != nil {
		return err
	}
	// Deserialize `MaxAccountSize`:
	err = decoder.Decode(&obj.MaxAccountSize)
	if err != nil {
		return err
	}
	// Deserialize `MinAccountSize`:
	err = decoder.Decode(&obj.MinAccountSize)
	if err != nil {
		return err
	}
	return nil
}

type File struct {
	Immutable          bool
	ToBeDeleted        bool
	DeleteRequestEpoch uint32
	Size               uint64
	Sha256Hash         [32]uint8
	InitCounterSeed    uint32
	StorageAccount     ag_solanago.PublicKey
	Name               string
}

var FileDiscriminator = [8]byte{42, 139, 221, 240, 129, 106, 48, 252}

func (obj File) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FileDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Immutable` param:
	err = encoder.Encode(obj.Immutable)
	if err != nil {
		return err
	}
	// Serialize `ToBeDeleted` param:
	err = encoder.Encode(obj.ToBeDeleted)
	if err != nil {
		return err
	}
	// Serialize `DeleteRequestEpoch` param:
	err = encoder.Encode(obj.DeleteRequestEpoch)
	if err != nil {
		return err
	}
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	// Serialize `Sha256Hash` param:
	err = encoder.Encode(obj.Sha256Hash)
	if err != nil {
		return err
	}
	// Serialize `InitCounterSeed` param:
	err = encoder.Encode(obj.InitCounterSeed)
	if err != nil {
		return err
	}
	// Serialize `StorageAccount` param:
	err = encoder.Encode(obj.StorageAccount)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	return nil
}

func (obj *File) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FileDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[42 139 221 240 129 106 48 252]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Immutable`:
	err = decoder.Decode(&obj.Immutable)
	if err != nil {
		return err
	}
	// Deserialize `ToBeDeleted`:
	err = decoder.Decode(&obj.ToBeDeleted)
	if err != nil {
		return err
	}
	// Deserialize `DeleteRequestEpoch`:
	err = decoder.Decode(&obj.DeleteRequestEpoch)
	if err != nil {
		return err
	}
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	// Deserialize `Sha256Hash`:
	err = decoder.Decode(&obj.Sha256Hash)
	if err != nil {
		return err
	}
	// Deserialize `InitCounterSeed`:
	err = decoder.Decode(&obj.InitCounterSeed)
	if err != nil {
		return err
	}
	// Deserialize `StorageAccount`:
	err = decoder.Decode(&obj.StorageAccount)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	return nil
}
