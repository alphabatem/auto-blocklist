// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package shadow_drive_user_staking

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "ShadowDriveUserStaking"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitializeConfig = ag_binary.TypeID([8]byte{208, 127, 21, 1, 194, 190, 196, 70})

	Instruction_UpdateConfig = ag_binary.TypeID([8]byte{29, 158, 252, 191, 10, 83, 219, 99})

	Instruction_MutableFees = ag_binary.TypeID([8]byte{250, 38, 118, 149, 204, 133, 239, 231})

	Instruction_InitializeAccount = ag_binary.TypeID([8]byte{74, 115, 99, 93, 197, 69, 103, 7})

	Instruction_InitializeAccount2 = ag_binary.TypeID([8]byte{8, 182, 149, 144, 185, 31, 209, 105})

	Instruction_UpdateAccount = ag_binary.TypeID([8]byte{231, 31, 72, 97, 68, 133, 133, 152})

	Instruction_UpdateAccount2 = ag_binary.TypeID([8]byte{94, 86, 186, 115, 33, 187, 237, 8})

	Instruction_RequestDeleteAccount = ag_binary.TypeID([8]byte{223, 4, 76, 243, 237, 193, 231, 46})

	Instruction_RequestDeleteAccount2 = ag_binary.TypeID([8]byte{8, 140, 234, 95, 25, 4, 50, 185})

	Instruction_UnmarkDeleteAccount = ag_binary.TypeID([8]byte{95, 27, 216, 87, 94, 97, 212, 183})

	Instruction_UnmarkDeleteAccount2 = ag_binary.TypeID([8]byte{6, 60, 224, 154, 255, 67, 114, 140})

	Instruction_RedeemRent = ag_binary.TypeID([8]byte{33, 167, 14, 147, 153, 140, 217, 144})

	Instruction_DeleteAccount = ag_binary.TypeID([8]byte{124, 6, 214, 255, 144, 7, 159, 251})

	Instruction_DeleteAccount2 = ag_binary.TypeID([8]byte{102, 22, 243, 60, 222, 75, 121, 172})

	Instruction_MakeAccountImmutable = ag_binary.TypeID([8]byte{101, 64, 199, 31, 224, 32, 157, 231})

	Instruction_MakeAccountImmutable2 = ag_binary.TypeID([8]byte{67, 217, 126, 253, 69, 164, 84, 139})

	Instruction_BadCsam = ag_binary.TypeID([8]byte{35, 58, 226, 67, 218, 112, 141, 234})

	Instruction_BadCsam2 = ag_binary.TypeID([8]byte{71, 185, 133, 67, 232, 253, 118, 203})

	Instruction_IncreaseStorage = ag_binary.TypeID([8]byte{228, 221, 246, 115, 32, 36, 23, 0})

	Instruction_IncreaseStorage2 = ag_binary.TypeID([8]byte{82, 92, 193, 19, 45, 12, 173, 78})

	Instruction_IncreaseImmutableStorage = ag_binary.TypeID([8]byte{15, 242, 154, 6, 214, 53, 252, 36})

	Instruction_IncreaseImmutableStorage2 = ag_binary.TypeID([8]byte{106, 68, 189, 44, 86, 106, 200, 155})

	Instruction_DecreaseStorage = ag_binary.TypeID([8]byte{67, 13, 65, 65, 109, 230, 42, 138})

	Instruction_DecreaseStorage2 = ag_binary.TypeID([8]byte{24, 37, 133, 195, 45, 197, 190, 175})

	Instruction_ClaimStake = ag_binary.TypeID([8]byte{62, 145, 133, 242, 244, 59, 53, 139})

	Instruction_ClaimStake2 = ag_binary.TypeID([8]byte{219, 42, 186, 26, 91, 182, 115, 63})

	Instruction_Crank = ag_binary.TypeID([8]byte{0, 232, 3, 195, 124, 117, 105, 53})

	Instruction_Crank2 = ag_binary.TypeID([8]byte{229, 9, 195, 60, 102, 88, 163, 54})

	Instruction_RefreshStake = ag_binary.TypeID([8]byte{194, 123, 40, 247, 37, 237, 119, 119})

	Instruction_RefreshStake2 = ag_binary.TypeID([8]byte{184, 185, 15, 101, 172, 46, 252, 56})

	Instruction_MigrateStep1 = ag_binary.TypeID([8]byte{53, 197, 190, 236, 105, 239, 89, 99})

	Instruction_MigrateStep2 = ag_binary.TypeID([8]byte{236, 176, 21, 180, 127, 73, 184, 61})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeConfig:
		return "InitializeConfig"
	case Instruction_UpdateConfig:
		return "UpdateConfig"
	case Instruction_MutableFees:
		return "MutableFees"
	case Instruction_InitializeAccount:
		return "InitializeAccount"
	case Instruction_InitializeAccount2:
		return "InitializeAccount2"
	case Instruction_UpdateAccount:
		return "UpdateAccount"
	case Instruction_UpdateAccount2:
		return "UpdateAccount2"
	case Instruction_RequestDeleteAccount:
		return "RequestDeleteAccount"
	case Instruction_RequestDeleteAccount2:
		return "RequestDeleteAccount2"
	case Instruction_UnmarkDeleteAccount:
		return "UnmarkDeleteAccount"
	case Instruction_UnmarkDeleteAccount2:
		return "UnmarkDeleteAccount2"
	case Instruction_RedeemRent:
		return "RedeemRent"
	case Instruction_DeleteAccount:
		return "DeleteAccount"
	case Instruction_DeleteAccount2:
		return "DeleteAccount2"
	case Instruction_MakeAccountImmutable:
		return "MakeAccountImmutable"
	case Instruction_MakeAccountImmutable2:
		return "MakeAccountImmutable2"
	case Instruction_BadCsam:
		return "BadCsam"
	case Instruction_BadCsam2:
		return "BadCsam2"
	case Instruction_IncreaseStorage:
		return "IncreaseStorage"
	case Instruction_IncreaseStorage2:
		return "IncreaseStorage2"
	case Instruction_IncreaseImmutableStorage:
		return "IncreaseImmutableStorage"
	case Instruction_IncreaseImmutableStorage2:
		return "IncreaseImmutableStorage2"
	case Instruction_DecreaseStorage:
		return "DecreaseStorage"
	case Instruction_DecreaseStorage2:
		return "DecreaseStorage2"
	case Instruction_ClaimStake:
		return "ClaimStake"
	case Instruction_ClaimStake2:
		return "ClaimStake2"
	case Instruction_Crank:
		return "Crank"
	case Instruction_Crank2:
		return "Crank2"
	case Instruction_RefreshStake:
		return "RefreshStake"
	case Instruction_RefreshStake2:
		return "RefreshStake2"
	case Instruction_MigrateStep1:
		return "MigrateStep1"
	case Instruction_MigrateStep2:
		return "MigrateStep2"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize_config", (*InitializeConfig)(nil),
		},
		{
			"update_config", (*UpdateConfig)(nil),
		},
		{
			"mutable_fees", (*MutableFees)(nil),
		},
		{
			"initialize_account", (*InitializeAccount)(nil),
		},
		{
			"initialize_account2", (*InitializeAccount2)(nil),
		},
		{
			"update_account", (*UpdateAccount)(nil),
		},
		{
			"update_account2", (*UpdateAccount2)(nil),
		},
		{
			"request_delete_account", (*RequestDeleteAccount)(nil),
		},
		{
			"request_delete_account2", (*RequestDeleteAccount2)(nil),
		},
		{
			"unmark_delete_account", (*UnmarkDeleteAccount)(nil),
		},
		{
			"unmark_delete_account2", (*UnmarkDeleteAccount2)(nil),
		},
		{
			"redeem_rent", (*RedeemRent)(nil),
		},
		{
			"delete_account", (*DeleteAccount)(nil),
		},
		{
			"delete_account2", (*DeleteAccount2)(nil),
		},
		{
			"make_account_immutable", (*MakeAccountImmutable)(nil),
		},
		{
			"make_account_immutable2", (*MakeAccountImmutable2)(nil),
		},
		{
			"bad_csam", (*BadCsam)(nil),
		},
		{
			"bad_csam2", (*BadCsam2)(nil),
		},
		{
			"increase_storage", (*IncreaseStorage)(nil),
		},
		{
			"increase_storage2", (*IncreaseStorage2)(nil),
		},
		{
			"increase_immutable_storage", (*IncreaseImmutableStorage)(nil),
		},
		{
			"increase_immutable_storage2", (*IncreaseImmutableStorage2)(nil),
		},
		{
			"decrease_storage", (*DecreaseStorage)(nil),
		},
		{
			"decrease_storage2", (*DecreaseStorage2)(nil),
		},
		{
			"claim_stake", (*ClaimStake)(nil),
		},
		{
			"claim_stake2", (*ClaimStake2)(nil),
		},
		{
			"crank", (*Crank)(nil),
		},
		{
			"crank2", (*Crank2)(nil),
		},
		{
			"refresh_stake", (*RefreshStake)(nil),
		},
		{
			"refresh_stake2", (*RefreshStake2)(nil),
		},
		{
			"migrate_step1", (*MigrateStep1)(nil),
		},
		{
			"migrate_step2", (*MigrateStep2)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
