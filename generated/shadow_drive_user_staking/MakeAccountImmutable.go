// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package shadow_drive_user_staking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MakeAccountImmutable is the `makeAccountImmutable` instruction.
type MakeAccountImmutable struct {

	// [0] = [WRITE] storageConfig
	//
	// [1] = [WRITE] storageAccount
	//
	// [2] = [WRITE] stakeAccount
	//
	// [3] = [WRITE] emissionsWallet
	//
	// [4] = [WRITE, SIGNER] owner
	//
	// [5] = [SIGNER] uploader
	//
	// [6] = [WRITE] ownerAta
	//
	// [7] = [] tokenMint
	//
	// [8] = [] systemProgram
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] associatedTokenProgram
	//
	// [11] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMakeAccountImmutableInstructionBuilder creates a new `MakeAccountImmutable` instruction builder.
func NewMakeAccountImmutableInstructionBuilder() *MakeAccountImmutable {
	nd := &MakeAccountImmutable{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetStorageConfigAccount sets the "storageConfig" account.
func (inst *MakeAccountImmutable) SetStorageConfigAccount(storageConfig ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(storageConfig).WRITE()
	return inst
}

// GetStorageConfigAccount gets the "storageConfig" account.
func (inst *MakeAccountImmutable) GetStorageConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStorageAccountAccount sets the "storageAccount" account.
func (inst *MakeAccountImmutable) SetStorageAccountAccount(storageAccount ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(storageAccount).WRITE()
	return inst
}

// GetStorageAccountAccount gets the "storageAccount" account.
func (inst *MakeAccountImmutable) GetStorageAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStakeAccountAccount sets the "stakeAccount" account.
func (inst *MakeAccountImmutable) SetStakeAccountAccount(stakeAccount ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(stakeAccount).WRITE()
	return inst
}

// GetStakeAccountAccount gets the "stakeAccount" account.
func (inst *MakeAccountImmutable) GetStakeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEmissionsWalletAccount sets the "emissionsWallet" account.
func (inst *MakeAccountImmutable) SetEmissionsWalletAccount(emissionsWallet ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(emissionsWallet).WRITE()
	return inst
}

// GetEmissionsWalletAccount gets the "emissionsWallet" account.
func (inst *MakeAccountImmutable) GetEmissionsWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOwnerAccount sets the "owner" account.
func (inst *MakeAccountImmutable) SetOwnerAccount(owner ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *MakeAccountImmutable) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUploaderAccount sets the "uploader" account.
func (inst *MakeAccountImmutable) SetUploaderAccount(uploader ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(uploader).SIGNER()
	return inst
}

// GetUploaderAccount gets the "uploader" account.
func (inst *MakeAccountImmutable) GetUploaderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOwnerAtaAccount sets the "ownerAta" account.
func (inst *MakeAccountImmutable) SetOwnerAtaAccount(ownerAta ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(ownerAta).WRITE()
	return inst
}

// GetOwnerAtaAccount gets the "ownerAta" account.
func (inst *MakeAccountImmutable) GetOwnerAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *MakeAccountImmutable) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *MakeAccountImmutable) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MakeAccountImmutable) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MakeAccountImmutable) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MakeAccountImmutable) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MakeAccountImmutable) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *MakeAccountImmutable) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *MakeAccountImmutable) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *MakeAccountImmutable) SetRentAccount(rent ag_solanago.PublicKey) *MakeAccountImmutable {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MakeAccountImmutable) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst MakeAccountImmutable) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MakeAccountImmutable,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MakeAccountImmutable) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MakeAccountImmutable) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.StorageConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StorageAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StakeAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EmissionsWallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Uploader is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OwnerAta is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *MakeAccountImmutable) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MakeAccountImmutable")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         storageConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               storage", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 stake", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       emissionsWallet", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 owner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              uploader", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("              ownerAta", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             tokenMint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj MakeAccountImmutable) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MakeAccountImmutable) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMakeAccountImmutableInstruction declares a new MakeAccountImmutable instruction with the provided parameters and accounts.
func NewMakeAccountImmutableInstruction(
	// Accounts:
	storageConfig ag_solanago.PublicKey,
	storageAccount ag_solanago.PublicKey,
	stakeAccount ag_solanago.PublicKey,
	emissionsWallet ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	uploader ag_solanago.PublicKey,
	ownerAta ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *MakeAccountImmutable {
	return NewMakeAccountImmutableInstructionBuilder().
		SetStorageConfigAccount(storageConfig).
		SetStorageAccountAccount(storageAccount).
		SetStakeAccountAccount(stakeAccount).
		SetEmissionsWalletAccount(emissionsWallet).
		SetOwnerAccount(owner).
		SetUploaderAccount(uploader).
		SetOwnerAtaAccount(ownerAta).
		SetTokenMintAccount(tokenMint).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetRentAccount(rent)
}
