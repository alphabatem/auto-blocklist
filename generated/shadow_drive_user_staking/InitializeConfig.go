// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package shadow_drive_user_staking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeConfig is the `initializeConfig` instruction.
type InitializeConfig struct {
	Uploader *ag_solanago.PublicKey
	Admin2   *ag_solanago.PublicKey `bin:"optional"`

	// [0] = [WRITE] storageConfig
	//
	// [1] = [WRITE, SIGNER] admin1
	//
	// [2] = [] systemProgram
	//
	// [3] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeConfigInstructionBuilder creates a new `InitializeConfig` instruction builder.
func NewInitializeConfigInstructionBuilder() *InitializeConfig {
	nd := &InitializeConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetUploader sets the "uploader" parameter.
func (inst *InitializeConfig) SetUploader(uploader ag_solanago.PublicKey) *InitializeConfig {
	inst.Uploader = &uploader
	return inst
}

// SetAdmin2 sets the "admin2" parameter.
func (inst *InitializeConfig) SetAdmin2(admin2 ag_solanago.PublicKey) *InitializeConfig {
	inst.Admin2 = &admin2
	return inst
}

// SetStorageConfigAccount sets the "storageConfig" account.
func (inst *InitializeConfig) SetStorageConfigAccount(storageConfig ag_solanago.PublicKey) *InitializeConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(storageConfig).WRITE()
	return inst
}

// GetStorageConfigAccount gets the "storageConfig" account.
func (inst *InitializeConfig) GetStorageConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdmin1Account sets the "admin1" account.
func (inst *InitializeConfig) SetAdmin1Account(admin1 ag_solanago.PublicKey) *InitializeConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin1).WRITE().SIGNER()
	return inst
}

// GetAdmin1Account gets the "admin1" account.
func (inst *InitializeConfig) GetAdmin1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeConfig) SetRentAccount(rent ag_solanago.PublicKey) *InitializeConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeConfig) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst InitializeConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Uploader == nil {
			return errors.New("Uploader parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.StorageConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin1 is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializeConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Uploader", *inst.Uploader))
						paramsBranch.Child(ag_format.Param("  Admin2 (OPT)", inst.Admin2))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("storageConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       admin1", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj InitializeConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Uploader` param:
	err = encoder.Encode(obj.Uploader)
	if err != nil {
		return err
	}
	// Serialize `Admin2` param (optional):
	{
		if obj.Admin2 == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Admin2)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *InitializeConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Uploader`:
	err = decoder.Decode(&obj.Uploader)
	if err != nil {
		return err
	}
	// Deserialize `Admin2` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Admin2)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewInitializeConfigInstruction declares a new InitializeConfig instruction with the provided parameters and accounts.
func NewInitializeConfigInstruction(
	// Parameters:
	uploader ag_solanago.PublicKey,
	admin2 ag_solanago.PublicKey,
	// Accounts:
	storageConfig ag_solanago.PublicKey,
	admin1 ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializeConfig {
	return NewInitializeConfigInstructionBuilder().
		SetUploader(uploader).
		SetAdmin2(admin2).
		SetStorageConfigAccount(storageConfig).
		SetAdmin1Account(admin1).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
