// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package shadow_drive_user_staking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MutableFees is the `mutableFees` instruction.
type MutableFees struct {
	ShadesPerGbPerEpoch *uint64 `bin:"optional"`
	CrankBps            *uint32 `bin:"optional"`

	// [0] = [WRITE] storageConfig
	//
	// [1] = [WRITE, SIGNER] admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMutableFeesInstructionBuilder creates a new `MutableFees` instruction builder.
func NewMutableFeesInstructionBuilder() *MutableFees {
	nd := &MutableFees{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetShadesPerGbPerEpoch sets the "shadesPerGbPerEpoch" parameter.
func (inst *MutableFees) SetShadesPerGbPerEpoch(shadesPerGbPerEpoch uint64) *MutableFees {
	inst.ShadesPerGbPerEpoch = &shadesPerGbPerEpoch
	return inst
}

// SetCrankBps sets the "crankBps" parameter.
func (inst *MutableFees) SetCrankBps(crankBps uint32) *MutableFees {
	inst.CrankBps = &crankBps
	return inst
}

// SetStorageConfigAccount sets the "storageConfig" account.
func (inst *MutableFees) SetStorageConfigAccount(storageConfig ag_solanago.PublicKey) *MutableFees {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(storageConfig).WRITE()
	return inst
}

// GetStorageConfigAccount gets the "storageConfig" account.
func (inst *MutableFees) GetStorageConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *MutableFees) SetAdminAccount(admin ag_solanago.PublicKey) *MutableFees {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *MutableFees) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst MutableFees) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MutableFees,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MutableFees) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MutableFees) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.StorageConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *MutableFees) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MutableFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ShadesPerGbPerEpoch (OPT)", inst.ShadesPerGbPerEpoch))
						paramsBranch.Child(ag_format.Param("           CrankBps (OPT)", inst.CrankBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("storageConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        admin", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj MutableFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ShadesPerGbPerEpoch` param (optional):
	{
		if obj.ShadesPerGbPerEpoch == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ShadesPerGbPerEpoch)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CrankBps` param (optional):
	{
		if obj.CrankBps == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CrankBps)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *MutableFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ShadesPerGbPerEpoch` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ShadesPerGbPerEpoch)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CrankBps` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CrankBps)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewMutableFeesInstruction declares a new MutableFees instruction with the provided parameters and accounts.
func NewMutableFeesInstruction(
	// Parameters:
	shadesPerGbPerEpoch uint64,
	crankBps uint32,
	// Accounts:
	storageConfig ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *MutableFees {
	return NewMutableFeesInstructionBuilder().
		SetShadesPerGbPerEpoch(shadesPerGbPerEpoch).
		SetCrankBps(crankBps).
		SetStorageConfigAccount(storageConfig).
		SetAdminAccount(admin)
}
