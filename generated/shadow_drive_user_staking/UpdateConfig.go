// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package shadow_drive_user_staking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateConfig is the `updateConfig` instruction.
type UpdateConfig struct {
	NewStorageCost      *uint64                `bin:"optional"`
	NewStorageAvailable *ag_binary.Uint128     `bin:"optional"`
	NewAdmin2           *ag_solanago.PublicKey `bin:"optional"`
	NewMaxAcctSize      *uint64                `bin:"optional"`
	NewMinAcctSize      *uint64                `bin:"optional"`

	// [0] = [WRITE] storageConfig
	//
	// [1] = [WRITE, SIGNER] admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateConfigInstructionBuilder creates a new `UpdateConfig` instruction builder.
func NewUpdateConfigInstructionBuilder() *UpdateConfig {
	nd := &UpdateConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetNewStorageCost sets the "newStorageCost" parameter.
func (inst *UpdateConfig) SetNewStorageCost(newStorageCost uint64) *UpdateConfig {
	inst.NewStorageCost = &newStorageCost
	return inst
}

// SetNewStorageAvailable sets the "newStorageAvailable" parameter.
func (inst *UpdateConfig) SetNewStorageAvailable(newStorageAvailable ag_binary.Uint128) *UpdateConfig {
	inst.NewStorageAvailable = &newStorageAvailable
	return inst
}

// SetNewAdmin2 sets the "newAdmin2" parameter.
func (inst *UpdateConfig) SetNewAdmin2(newAdmin2 ag_solanago.PublicKey) *UpdateConfig {
	inst.NewAdmin2 = &newAdmin2
	return inst
}

// SetNewMaxAcctSize sets the "newMaxAcctSize" parameter.
func (inst *UpdateConfig) SetNewMaxAcctSize(newMaxAcctSize uint64) *UpdateConfig {
	inst.NewMaxAcctSize = &newMaxAcctSize
	return inst
}

// SetNewMinAcctSize sets the "newMinAcctSize" parameter.
func (inst *UpdateConfig) SetNewMinAcctSize(newMinAcctSize uint64) *UpdateConfig {
	inst.NewMinAcctSize = &newMinAcctSize
	return inst
}

// SetStorageConfigAccount sets the "storageConfig" account.
func (inst *UpdateConfig) SetStorageConfigAccount(storageConfig ag_solanago.PublicKey) *UpdateConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(storageConfig).WRITE()
	return inst
}

// GetStorageConfigAccount gets the "storageConfig" account.
func (inst *UpdateConfig) GetStorageConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateConfig) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateConfig) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.StorageConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *UpdateConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     NewStorageCost (OPT)", inst.NewStorageCost))
						paramsBranch.Child(ag_format.Param("NewStorageAvailable (OPT)", inst.NewStorageAvailable))
						paramsBranch.Child(ag_format.Param("          NewAdmin2 (OPT)", inst.NewAdmin2))
						paramsBranch.Child(ag_format.Param("     NewMaxAcctSize (OPT)", inst.NewMaxAcctSize))
						paramsBranch.Child(ag_format.Param("     NewMinAcctSize (OPT)", inst.NewMinAcctSize))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("storageConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        admin", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewStorageCost` param (optional):
	{
		if obj.NewStorageCost == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewStorageCost)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NewStorageAvailable` param (optional):
	{
		if obj.NewStorageAvailable == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewStorageAvailable)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NewAdmin2` param (optional):
	{
		if obj.NewAdmin2 == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewAdmin2)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NewMaxAcctSize` param (optional):
	{
		if obj.NewMaxAcctSize == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewMaxAcctSize)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NewMinAcctSize` param (optional):
	{
		if obj.NewMinAcctSize == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewMinAcctSize)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *UpdateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewStorageCost` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewStorageCost)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NewStorageAvailable` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewStorageAvailable)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NewAdmin2` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewAdmin2)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NewMaxAcctSize` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewMaxAcctSize)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NewMinAcctSize` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewMinAcctSize)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewUpdateConfigInstruction declares a new UpdateConfig instruction with the provided parameters and accounts.
func NewUpdateConfigInstruction(
	// Parameters:
	newStorageCost uint64,
	newStorageAvailable ag_binary.Uint128,
	newAdmin2 ag_solanago.PublicKey,
	newMaxAcctSize uint64,
	newMinAcctSize uint64,
	// Accounts:
	storageConfig ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *UpdateConfig {
	return NewUpdateConfigInstructionBuilder().
		SetNewStorageCost(newStorageCost).
		SetNewStorageAvailable(newStorageAvailable).
		SetNewAdmin2(newAdmin2).
		SetNewMaxAcctSize(newMaxAcctSize).
		SetNewMinAcctSize(newMinAcctSize).
		SetStorageConfigAccount(storageConfig).
		SetAdminAccount(admin)
}
